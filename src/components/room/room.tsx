/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.15 public/models/scene7.gltf 
*/

import React, { FC, useEffect, useState } from "react";
import { useGLTF } from "@react-three/drei";
import * as THREE from "three";
import browserVideo from "../../assets/browser.mp4";
import codeVideo from "../../assets/code.mp4";
import { RoomProps } from "./room.types";

export const Room: FC<RoomProps> = ({
  light,
  setLight,
  clicables,
  onBooksClick,
  onGraduationCapClick,
  changeLanguageHandler,
  ...props
}) => {
  const { nodes, materials }: any = useGLTF("models/scene7.gltf");

  const [hovered, setHovered] = useState(false);

  const [video1] = useState(() => {
    const vid = document.createElement("video");
    vid.src = browserVideo;
    vid.crossOrigin = "Anonymous";
    vid.loop = true;
    vid.muted = true;
    vid.autoplay = true;
    vid.play();
    return vid;
  });

  const [video2] = useState(() => {
    const vid = document.createElement("video");
    vid.src = codeVideo;
    vid.crossOrigin = "Anonymous";
    vid.loop = true;
    vid.muted = true;
    vid.autoplay = true;
    vid.play();
    return vid;
  });

  useEffect(() => {
    document.body.style.cursor = hovered ? "pointer" : "auto";
  }, [hovered]);

  const clicableMaterial = new THREE.MeshBasicMaterial({
    transparent: true,
    opacity: 0.45,
    color: 0xffff,
    visible: true,
  });

  const applyGlassMaterial = () => {
    useEffect((): any => {
      const material = new THREE.MeshBasicMaterial({
        map: materials.aquarium_glass_Baked,
        aoMap: materials.aquarium_glass_Baked,
        transparent: true,
        opacity: 0.05,
      });
      return material;
    }, []);
  };

  return (
    <group {...props} dispose={null}>
      <mesh
        geometry={nodes.Cylinder.geometry}
        material={materials["Material.003"]}
        position={[-2.879, 1.714, -2.651]}
        scale={0.05}
      />
      <mesh
        geometry={nodes.tableLights_Baked.geometry}
        material={materials.MergedBake_Baked}
        position={[-3.602, 1.778, 1.51]}
        rotation={[-Math.PI / 2, -Math.PI / 2, 0]}
        scale={[-0.021, -1.777, -0.021]}
      />
      <mesh
        geometry={nodes.wallLight_Baked.geometry}
        material={materials.MergedBake_Baked}
        position={[-3.61, 3.957, 1.715]}
        rotation={[-Math.PI / 2, 0, -Math.PI]}
        scale={[-0.017, -1.339, -0.017]}
      />
      <mesh
        geometry={nodes.keyboard_Baked.geometry}
        material={materials.keyboard_Baked}
        position={[-2.328, 1.913, 2.133]}
        rotation={[-Math.PI, 1.42, -Math.PI]}
        scale={[0.741, 0.159, 0.234]}
      />
      <mesh
        geometry={nodes.PCScreen_Baked.geometry}
        material={clicables ? materials.PCScreen_Baked : clicableMaterial}
        position={[-2.959, 1.89, 2.393]}
        rotation={[-Math.PI, 1.406, -Math.PI]}
        scale={[0.659, 0.033, 0.096]}
        onPointerOver={() => setHovered(true)}
        onPointerOut={() => setHovered(false)}
      />
      <mesh
        geometry={nodes.computer_Baked.geometry}
        material={materials.computer_Baked}
        position={[-2.672, 1.016, 0.196]}
        rotation={[0, Math.PI / 2, 0]}
        scale={[0.246, 0.426, 0.622]}
      />
      <mesh
        geometry={nodes.mousepad_Baked.geometry}
        material={materials.mousepad_Baked}
        position={[-2.341, 1.877, 1.083]}
        rotation={[0, Math.PI / 2, 0]}
        scale={0.272}
      />
      <mesh
        geometry={nodes.soda_Baked.geometry}
        material={materials.soda_Baked}
        position={[-2.272, 2.035, 3.124]}
        rotation={[0, Math.PI / 2, 0]}
      />
      <mesh
        geometry={nodes.frigobar_Baked.geometry}
        material={materials.frigobar_Baked}
        position={[-2.735, 0.35, -1.223]}
        scale={0.887}
      />
      <mesh
        geometry={nodes.wallBigWrapper_Baked.geometry}
        material={materials.wallBigWrapper_Baked}
        position={[-3.602, 4.132, 1.841]}
        scale={0.934}
      />
      <mesh
        geometry={nodes.graduationCap_Baked.geometry}
        material={clicables ? materials.graduationCap_Baked : clicableMaterial}
        position={[-3.141, 4.297, 2.396]}
        scale={0.045}
        onPointerOver={() => setHovered(true)}
        onPointerOut={() => setHovered(false)}
        onClick={onGraduationCapClick}
      />
      <mesh
        geometry={nodes.mouse_Baked.geometry}
        material={materials.mouse_Baked}
        position={[-2.861, 1.526, 0.809]}
        rotation={[1.647, 1.476, -1.64]}
        scale={[0.09, 0.09, 0.167]}
      />
      <mesh
        geometry={nodes.laptop_Baked.geometry}
        material={clicables ? materials.laptop_Baked : clicableMaterial}
        position={[-2.92, 2.157, 0.331]}
        rotation={[0, 1.127, 0]}
        scale={[-0.465, -0.228, -0.327]}
        onPointerOver={() => setHovered(true)}
        onPointerOut={() => setHovered(false)}
      />
      <mesh
        geometry={nodes.table_Baked.geometry}
        material={materials.table_Baked}
        position={[-2.716, 1.835, 1.508]}
        rotation={[0, Math.PI / 2, 0]}
        scale={[0.2, 0.652, 0.826]}
      />
      <mesh
        geometry={nodes.flags_Baked.geometry}
        material={clicables ? materials.flags_Baked : clicableMaterial}
        position={[-3.594, 3.482, 0.723]}
        rotation={[Math.PI / 2, 0, -Math.PI / 2]}
        scale={[0.146, 0.072, 0.101]}
        onClick={() => changeLanguageHandler("pt")}
        onPointerOver={() => setHovered(true)}
        onPointerOut={() => setHovered(false)}
      />
      <mesh
        geometry={nodes.floor_Baked.geometry}
        material={materials.floor_Baked}
        position={[0.124, 0, -0.102]}
      />
      <mesh
        geometry={nodes.window_Baked.geometry}
        material={materials.window_Baked}
        position={[-1.365, 3.292, -4.432]}
      />
      <mesh
        geometry={nodes.windowOutside_Baked.geometry}
        material={materials.windowOutside_Baked}
        position={[-1.36, 3.29, -3.563]}
        rotation={[-Math.PI / 2, Math.PI / 2, 0]}
        scale={0.887}
      />
      <mesh
        geometry={nodes.books_Baked.geometry}
        material={clicables ? materials.books_Baked : clicableMaterial}
        position={[-3.284, 4.222, 3.061]}
        rotation={[0, -0.058, 0]}
        scale={[0.092, 0.026, 0.126]}
        onPointerOver={() => setHovered(true)}
        onPointerOut={() => setHovered(false)}
        onClick={onBooksClick}
      />
      <mesh
        geometry={nodes.shelfSmall_Baked.geometry}
        material={materials.shelfSmall_Baked}
        position={[-3.602, 2.806, -2.214]}
        scale={[0.934, 0.934, 0.46]}
      />
      <mesh
        geometry={nodes.plantPot_Baked.geometry}
        material={materials.plantPot_Baked}
        position={[-3.151, 3.313, -2.605]}
        rotation={[Math.PI / 2, 0, 2.297]}
      />
      <mesh
        geometry={nodes.lamp_Baked.geometry}
        material={clicables ? materials.lamp_Baked : clicableMaterial}
        position={[-3.242, 3.666, -1.371]}
        rotation={[Math.PI / 2, 0, 0]}
        onClick={setLight}
        onPointerOver={() => setHovered(true)}
        onPointerOut={() => setHovered(false)}
      />
      <mesh
        geometry={nodes.lego_Baked.geometry}
        material={materials.lego_Baked}
        position={[-3.215, 4.384, 0.554]}
        rotation={[Math.PI / 2, 0, -0.737]}
        scale={0.33}
      />
      <mesh
        geometry={nodes.bible_Baked.geometry}
        material={clicables ? materials.bible_Baked : clicableMaterial}
        position={[-3.355, 4.193, 1.379]}
        onPointerOver={() => setHovered(true)}
        onPointerOut={() => setHovered(false)}
      />
      {/* <mesh
        geometry={nodes.skateboard__Baked.geometry}
        material={materials.skateboard__Baked}
        position={[-0.968, 1.236, -3.237]}
        rotation={[2.718, 0, Math.PI / 2]}
      /> */}
      <mesh
        geometry={nodes.Cadeira_gamer001_Baked.geometry}
        material={materials["Cadeira_gamer.001_Baked"]}
        position={[-0.864, 1.627, 2.338]}
        rotation={[Math.PI / 2, 0, Math.PI / 2]}
        scale={1.028}
      />
      <mesh
        geometry={nodes["12987_Saltwater_Aquarium_v1_l1_Baked"].geometry}
        material={materials["12987_Saltwater_Aquarium_v1_l1_Baked"]}
        position={[-2.87, 1.435, -2.656]}
        rotation={[Math.PI / 2, -Math.PI / 2, 0]}
        scale={0.68}
      />
      <mesh
        geometry={nodes.aquariumBase_Baked.geometry}
        material={materials.aquariumBase_Baked}
        position={[-2.903, 0.639, -2.657]}
        scale={[0.365, 0.26, 0.785]}
      />
      <mesh
        geometry={nodes.aquarium_glass_Baked.geometry}
        material={applyGlassMaterial as any}
        position={[-2.87, 1.435, -2.656]}
        rotation={[Math.PI / 2, -Math.PI / 2, 0]}
        scale={0.68}
      />
      <mesh
        geometry={
          nodes["10487_basketball_v1_3dmax2011_it2_Baked001_Baked"].geometry
        }
        material={
          materials["10487_basketball_v1_3dmax2011_it2_Baked.001_Baked"]
        }
        rotation={[Math.PI / 2, 0, 0]}
      />
      <mesh
        geometry={nodes.walls_Baked.geometry}
        material={materials["walls_Baked.004"]}
        position={[0.046, 0.161, -0.077]}
        scale={[4.001, 0.188, 4.001]}
      />
      <mesh
        geometry={nodes.screen_Baked.geometry}
        material={clicables ? materials["screen_Baked.001"] : clicableMaterial}
        position={[-2.959, 1.89, 2.393]}
        rotation={[-Math.PI, 1.406, -Math.PI]}
        scale={[0.659, 0.033, 0.096]}
        onPointerOver={() => setHovered(true)}
        onPointerOut={() => setHovered(false)}
      >
        <meshStandardMaterial emissive={"white"} side={THREE.DoubleSide}>
          <videoTexture attach="map" args={[video2]} />
          <videoTexture attach="emissiveMap" args={[video2]} />
        </meshStandardMaterial>
      </mesh>
      <mesh
        geometry={nodes.laptopScreen_Baked.geometry}
        material={clicables ? materials.laptopScreen_Baked : clicableMaterial}
        position={[-3.222, 2.166, 0.188]}
        rotation={[0, 0.535, 0]}
        scale={[-0.465, -0.228, -0.327]}
        onPointerOver={() => setHovered(true)}
        onPointerOut={() => setHovered(false)}
      >
        <meshStandardMaterial emissive={"white"} side={THREE.DoubleSide}>
          <videoTexture attach="map" args={[video1]} />
          <videoTexture attach="emissiveMap" args={[video1]} />
        </meshStandardMaterial>
      </mesh>
      <mesh
        geometry={nodes.english_Baked.geometry}
        material={clicables ? materials.english_Baked : clicableMaterial}
        position={[-3.573, 3.482, 1.06]}
        rotation={[1.427, 0, -Math.PI / 2]}
        scale={[0.146, 0.072, 0.101]}
        onClick={() => changeLanguageHandler("en")}
        onPointerOver={() => setHovered(true)}
        onPointerOut={() => setHovered(false)}
      />
      <mesh
        geometry={nodes.french_Baked.geometry}
        material={clicables ? materials.french_Baked : clicableMaterial}
        position={[-3.586, 3.482, 0.382]}
        rotation={[1.647, 0, -Math.PI / 2]}
        scale={[0.146, 0.072, 0.101]}
        onClick={() => changeLanguageHandler("fr")}
        onPointerOver={() => setHovered(true)}
        onPointerOut={() => setHovered(false)}
      />
      <mesh
        geometry={nodes.wrapper_Baked.geometry}
        material={materials["wrapper_Baked.001"]}
        position={[-3.594, 3.593, 0.726]}
        rotation={[Math.PI / 2, 0, 0]}
        scale={[0.01, 0.349, 0.01]}
      />
    </group>
  );
};

useGLTF.preload("/models/scene7.gltf");
